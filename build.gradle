// This file provides basic support for building the TensorFlow demo
// in Android Studio with Gradle.
//
// Note that Bazel is still used by default to compile the native libs,
// and should be installed at the location noted below. This build file
// automates the process of calling out to it and copying the compiled
// libraries back into the appropriate directory.
//
// Alternatively, experimental support for Makefile builds is provided by
// setting buildWithMake below to true. This will allow building the demo
// on Windows machines, but note that full equivalence with the Bazel
// build is not yet guaranteed. See comments below for caveats and tips
// for speeding up the build, such as as enabling ccache.

// Set to true to build with make.
// NOTE: Running a make build will cause subsequent Bazel builds to *fail*
// unless the contrib/makefile/downloads/ and gen/ dirs are deleted afterwards.
def buildWithMake = false

// Controls output directory in APK and CPU type for Bazel builds.
// NOTE: Does not affect the Makefile build target API (yet), which currently
// assumes armeabi-v7a. If building with make, changing this will require
// editing the Makefile as well.
//def cpuType = 'armeabi-v7a'
//def cpuType = 'armeabi'
//def cpuType = 'x86'

// Output directory in the local directory for packaging into the APK.

def tensorflowRepo = '/data/androidStudioProjects/tensorflow/'

// Default to building with Bazel and override with make if requested.
def nativeBuildRule = 'buildNativeBazel'
def inferenceLibPath = tensorflowRepo + '/bazel-bin/tensorflow/contrib/android/libtensorflow_inference.so'
if (buildWithMake) {
    nativeBuildRule = 'buildNativeMake'
    inferenceLibPath = tensorflowRepo + '/tensorflow/contrib/makefile/gen/lib/libtensorflow_inference.so'
}

// Defines the NDK location for Makefile builds. Does *not* affect Bazel builds.
// Override with your absolute NDK location if this fails to get the location
// automatically.
def makeNdkRoot = System.getenv('NDK_ROOT')

// If building with Bazel, this is the location of the bazel binary.
// NOTE: Bazel does not yet support building for Android on Windows,
// so in this case the Makefile build must be used as described above.
def bazelLocation = 'bazel'

project.buildDir = 'gradleBuild'
getProject().setBuildDir('gradleBuild')

// import DownloadModels task
project.ext.ASSET_DIR = projectDir.toString() + '/assets'
project.ext.TMP_DIR   = project.buildDir.toString() + '/downloads'

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.1'
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    lintOptions {
        abortOnError false
    }

    def mainDir = "src/main"
    sourceSets {
        main {
            // TensorFlow Java API sources.
            java {
                srcDir tensorflowRepo + 'tensorflow/java/src/main/java'
                exclude '**/examples/**'
            }

            // Android TensorFlow wrappers, etc.
            java {
                srcDir tensorflowRepo + 'tensorflow/contrib/android/java'
            }

            java.srcDir 'src/main/java'
            manifest.srcFile 'AndroidManifest.xml'
            resources.srcDirs = ['src/main/res']
            aidl.srcDirs = ['src/main/java']
            renderscript.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = [project.ext.ASSET_DIR]
            jniLibs.srcDirs = ['libs']
        }

        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    defaultConfig {
        applicationId "com.vackosar.ytcapsdowner"
        minSdkVersion 11
        targetSdkVersion 11
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'commons-lang:commons-lang:2.3'
    testCompile 'junit:junit:4.12'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
}

task buildNativeBazel() {
    doLast {
        buildNativeBazelForCpu('x86', tensorflowRepo, bazelLocation, inferenceLibPath)
        buildNativeBazelForCpu('armeabi', tensorflowRepo, bazelLocation, inferenceLibPath)
        buildNativeBazelForCpu('armeabi-v7a', tensorflowRepo, bazelLocation, inferenceLibPath)
    }
}

def buildNativeBazelForCpu(String cpu, tensorflowRepo, bazelLocation, inferenceLibPath) {
    def libDir = System.getProperty("user.dir") + "/libs"
    exec {
        workingDir tensorflowRepo
        commandLine bazelLocation, 'build', '-c', 'opt', 'tensorflow/examples/android:tensorflow_native_libs', '--crosstool_top=//external:android/crosstool', '--cpu=' + cpu, '--host_crosstool_top=@bazel_tools//tools/cpp:toolchain'
    }
    exec {
        workingDir tensorflowRepo
        commandLine "mkdir", "-p", libDir + "/" + cpu
    }
    exec {
        workingDir tensorflowRepo
        commandLine 'cp', "-f", inferenceLibPath, libDir + "/" + cpu
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'assembleDebug') {
        task.dependsOn nativeBuildRule
    }
    if (task.name == 'assembleRelease') {
        task.dependsOn nativeBuildRule
    }
}

// Download default models; if you wish to use your own models then
// place them in the "assets" directory and comment out this line.
//apply from: "download-models.gradle"

